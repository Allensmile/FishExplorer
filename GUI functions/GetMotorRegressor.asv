function [regressors,name_array,M_regressor,name_array_short] = GetMotorRegressor(behavior,i_fish)
% 'regressors' is a struct with field 'im', M_regressor contains only the
% 'im' part which is just the regressor vectors.

% this is now using saved motor-'seeds' (the activity of selected hindbrain neurons most
% correlated to the fictive motor signals) as regressors, and we only have
% left and right channels, no forward channel. 
if size(behavior,1) == 2,
    isMotorseed_flag = 1;
    
    regressors(1).name = 'motor-left';
    regressors(1).im = behavior(1,:);
    regressors(2).name = 'motor-right';
    regressors(2).im = behavior(2,:);
    
    name_array = {'motor-left','motor-right'};
    
    M_regressor = behavior;
    name_array_short = 
end 

tlen=size(behavior,2);
    
regressor_0={ % rows = [7,8,9,13,14];
    behavior(1,:);   %weighted: left turns
    behavior(3,:);   %weighted: forward turns
    behavior(2,:);   %weighted: right swims
    behavior(4,:);  %analog: left channel
    behavior(5,:);  %analog: right channel   
    behavior(4,:)+behavior(5,:);   %analog: average
    };
nRegType = length(regressor_0);
name_array = {'motor-left','motor-fwd','motor-right','raw_right','raw_left','raw_all'};

% segment length and round off, for shuffled control
segLength = floor(tlen/80);
s4_ = tlen-mod(tlen,segLength);

% initialize/preallocate struct
regressors(nRegType).name = [];
regressors(nRegType).im = [];
regressors(nRegType).ctrl = [];

%% feed all regressors into struct
idx = 0;
for j=1:nRegType, %run_StimRegType_subset,
    len = size(regressor_0{j},1);
    for i=1:len, %run_PhotoState_subset,
        idx = idx + 1;
        reg = regressor_0{j}(i,:);
        %         idx = (j-1)*nStimRegType + i;
        
        regressors(idx).name = [name_array{j} '_' num2str(i)];
        % generate regressor in imaging time
        regressors(idx).im = gen_reg_im(gc6, t_gc6, t_im, reg);
        
        % generate shuffled regressor
        reg_ = reg(1:s4_);
        reg2D = reshape(reg_, segLength, []);
        indices = randperm(size(reg2D,2)); % reshuffle by indexing
        shffreg = reg2D(:, indices);
        shffreg = reshape(shffreg,1,[]);
        temp = reg;
        temp(1:s4_) = shffreg;
        shffreg = temp;
        regressors(idx).ctrl = gen_reg_im(gc6, t_gc6, t_im, shffreg);
        
    end
end

%% dense format
range_motorreg = [1,2,3];
M_regressor = zeros(length(range_motorreg),length(regressors(1).im));
for i = 1:length(range_motorreg),
    M_regressor(i,:) = regressors(range_motorreg(i)).im;
end

name_array_short = name_array(range_motorreg);
end

